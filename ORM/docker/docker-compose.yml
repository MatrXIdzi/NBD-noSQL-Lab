networks:
  mongo-network: {}
  redis-network: {}

services:
  mongo1:
    build: .
    container_name: mongodb1
    hostname: mongodb1
    ports:
      - "27017:27017"
    networks:
      - mongo-network
    command: ["--config", "/etc/mongod.conf", "--port", "27017"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 2s
      retries: 5
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
      - MONGO_INITDB_DATABASE=restaurant


  mongoinit:
    build: .
    image: mongocustom:8.0.1
    container_name: mongodbinit
    hostname: mongodbinit
    networks:
      - mongo-network
    restart: unless-stopped
    depends_on:
      mongo1:
        condition: service_healthy
#      mongo2:
#        condition: service_healthy
#      mongo3:
#        condition: service_healthy
    command: >
      mongosh --host mongodb1:27017 --username admin --password adminpassword --authenticationDatabase admin --eval
      '
      rs.initiate()
      '

  redis-stack:
    image: redis/redis-stack:latest
    volumes:
      - redis-stack-data:/bitnami/redis/data
    ports:
      - "8001:8001"
      - "6379:6379"
    networks:
      - redis-network
volumes:
  redis-stack-data:
    driver: local


#      >
#      mongosh --host mongodb1:27017 --username admin --password adminpassword --authenticationDatabase admin --eval
#      '
#      rs.initiate(
#        {
#          _id: "replica_set_single",
#          version: 1,
#          members: [
#            { _id: 0, host : "mongodb1:27017" },
#            { _id: 1, host : "mongodb2:27018" },
#            { _id: 2, host : "mongodb3:27019" }
#          ]
#        }
#      );
#      '


#  mongo2:
#    build: .
#    container_name: mongodb2
#    hostname: mongodb2
#    ports:
#      - "27018:27018"
#    networks:
#      - mongo-network
#    command: ["--config", "/etc/mongod.conf", "--port", "27018"]
#    restart: unless-stopped
#    healthcheck:
#      test: ["CMD", "mongosh", "--port", "27018", "--eval", "db.adminCommand('ping')"]
#      interval: 10s
#      timeout: 2s
#      retries: 5
#    environment:
#      - MONGO_INITDB_ROOT_USERNAME=admin
#      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
#      - MONGO_INITDB_DATABASE=restaurant
#
#  mongo3:
#    build: .
#    container_name: mongodb3
#    hostname: mongodb3
#    ports:
#      - "27019:27019"
#    networks:
#      - mongo-network
#    command: ["--config", "/etc/mongod.conf", "--port", "27019"]
#    restart: unless-stopped
#    healthcheck:
#      test: ["CMD", "mongosh", "--port", "27019", "--eval", "db.adminCommand('ping')"]
#      interval: 10s
#      timeout: 2s
#      retries: 5
#    environment:
#      - MONGO_INITDB_ROOT_USERNAME=admin
#      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
#      - MONGO_INITDB_DATABASE=restaurant